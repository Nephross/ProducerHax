#!/usr/bin/env node

/**
 * Module dependencies.
 */
'use strict';

const app = require('../app');
const debug = require('debug')('producerhax:server');
const fs = require('fs');
const http = require('http');
const https = require('https');
const privateKey = fs.readFileSync('sslcert/serverkey.pem', 'utf8');
const certificate = fs.readFileSync('sslcert/servercert.pem', 'utf8');

var credentials = {key: privateKey, cert: certificate};

/**
 * Get port from environment and store in Express.
 */

var httpPort = normalizePort(process.env.HTTPPORT || '8080');
var httpsPort = normalizePort(process.env.HTTPSPORT || '8443');
app.set('httpPort', httpPort);
app.set('httpsPort', httpsPort);

/**
 * Create HTTP and HTTPS server.
 */

var httpServer = http.createServer(app);
var httpsServer = https.createServer(credentials, app);
/**
 * Listen on provided port, on all network interfaces.
 */

httpServer.listen(httpPort);

httpServer.on('error', onHttpError);
httpServer.on('listening', onHttpListening);

httpsServer.listen(httpsPort);

httpsServer.on('error', onHttpsError);
httpsServer.on('listening', onHttpsListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onHttpError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof httpPort === 'string' ? 'Pipe ' + httpPort : 'Port ' + httpPort;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTPS server "error" event.
 */

function onHttpsError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof httpsPort === 'string' ? 'Pipe ' + httpsPort : 'Port ' + httpsPort;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onHttpListening() {
  var addr = httpServer.address();
  var bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
  console.log('Listening on ' + bind);
  debug('Listening on ' + bind);
}

/**
 * Event listener for HTTPS server "listening" event.
 */

function onHttpsListening() {
  var addr = httpsServer.address();
  var bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
  console.log('Listening on ' + bind);
  debug('Listening on ' + bind);
}
